buildscript {

    ext.bouncycastleVersion = '1.65'
    ext.rxjavaVersion = '2.2.21'
    ext.gsonVersion = '2.9.1'
    ext.okhttpVersion = '4.10.0'
    ext.loggingOkhttpVersion = '4.10.0'
    ext.slf4jVersion = '2.0.0'
    ext.guavaVersion = '32.1.1-jre'
    ext.junitVersion = '5.10.0'
    ext.kotestVersion = '5.6.2'
    ext.kotlinVersion = "1.9.10"
    ext.mockkVersion = "1.13.7"

    repositories {
        mavenCentral()
        maven { url 'https://nexus.web.cern.ch/nexus/content/repositories/public/' }
    }

    dependencies {
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.0.0'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'java'
	id 'signing'
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'
apply plugin: 'io.codearte.nexus-staging'

mainClassName = 'org.nervos.ckb.example.RpcExample'
applicationName = 'ckb-sdk-java'

description 'ckb-sdk-java base project'

allprojects {

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group 'org.nervos.ckb'
    version '0.0.11'
    apply plugin: 'java'

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    }

    test {
        ignoreFailures = true
        useJUnitPlatform()
    }
    apply from: rootProject.file('gradle/checkstyle.gradle')
}

configure(subprojects.findAll { it.name != 'tests' }) {

    // Required for JFrog Artifactory repository
    apply plugin: 'maven-publish'

    tasks.register('javadocJar', Jar) {
        archiveClassifier.set('javadoc')
        from javadoc
    }

    tasks.register('sourcesJar', Jar) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    tasks.register('testJar', Jar) {
        archiveClassifier.set('test-sources')
        from sourceSets.test.output
    }

    artifacts {
        archives sourcesJar, javadocJar, testJar
    }

    // Required for Maven Nexus repository
    apply plugin: 'signing'

    ext {
        ossrhUsername = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : ''
        ossrhPassword = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : ''
    }

    publishing {
        repositories {
            maven {
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username=ossrhUsername
                    password=ossrhPassword
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                groupId 'org.nervos.ckb'
                version '0.0.11'
				from components.java

				artifact javadocJar
				artifact sourcesJar

                pom {
                    name = 'ckb-sdk-java'
                    description = "ckb java sdk"
                    url = 'https://github.com/nervosnetwork/ckb-sdk-java.git'
                    scm {
                        connection = 'scm:git@github.com:nervosnetwork/ckb-sdk-java.git'
                        url = 'https://github.com/nervosnetwork/ckb-sdk-java.git'
                    }

                    licenses {
                        license {
                            name = 'The MIT License'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }
                    developers {
                        developer {
                            id = 'nervos'
                            name = 'nervos developer'
                            email = 'op@nervos.org'
                        }
                    }
                }
            }
        }
    }


    tasks.register('uploadArchives') {
        println "start publish ${project.name} ${it.name}"
        dependsOn publish
    }

    signing {



        signatory{
            keyId: project.findProperty('signing.keyId'),
            secretKeyRingFile: project.findProperty('signing.secretKeyRingFile'),
            password: project.findProperty('signing.password')
		}
       

        sign publishing.publications.mavenJava
    }

    tasks.register('release')  {
        println("release ${it.name}")
        dependsOn 'build'
        dependsOn 'uploadArchives'

        tasks.findByName('uploadArchives').mustRunAfter 'build'
    }
}

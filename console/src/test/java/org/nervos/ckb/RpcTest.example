package org.nervos.ckb;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.nervos.ckb.methods.type.*;
import org.nervos.ckb.service.CKBService;
import org.nervos.ckb.service.HttpService;

import java.io.IOException;
import java.math.BigInteger;
import java.util.Collections;
import java.util.List;

/**
 * Created by duanyytop on 2019-4-1.
 * Copyright Â© 2019 Nervos Foundation. All rights reserved.
 */
public class RpcTest {

    private static final String NODE_URL = "http://localhost:8114";

    private CKBService ckbService;

    @Before
    public void initService() {
        HttpService.setDebug(false);
        ckbService = CKBService.build(new HttpService(NODE_URL));
    }

    private Block getBlockByNumber(long number) throws IOException {
        String blockHash = ckbService.getBlockHash(number).send().getBlockHash();
        return ckbService.getBlock(blockHash).send().getBlock();
    }

    @Test
    public void testBlockAndTransaction() throws IOException {
        Block block = getBlockByNumber(0);
        Assert.assertNotNull("Block is null", block);
        Assert.assertNotNull("Block header is null", block.header);

    }

    @Test
    public void testTransaction() throws IOException {
        long blockNumber = 0;
        String transactionHash = getBlockByNumber(blockNumber).commitTransactions.get(0).hash;
        Transaction transaction = ckbService.getTransaction(transactionHash).send().getTransaction();
        Assert.assertNotNull("Transaction is null", transaction);
    }

    @Test
    public void testGetTipHeader() throws IOException {
        Header header = ckbService.getTipHeader().send().getHeader();
        Assert.assertNotNull("Tip header is null", header);
    }

    @Test
    public void testGetTipBlockNumber() throws IOException {
        BigInteger blockNumber = ckbService.getTipBlockNumber().send().getBlockNumber();
        Assert.assertNotNull("Block number is null", blockNumber.toString());
    }

    @Test
    public void localNodeInfo() throws IOException {
        NodeInfo nodeInfo = ckbService.localNodeInfo().send().getNodeInfo();
        Assert.assertNotNull("Node id is null", nodeInfo);
    }

    @Test
    public void testGetCellsByLockHash() throws IOException {
        List<CellOutputWithOutPoint> cellOutputWithOutPoints = ckbService.getCellsByLockHash(
                "0x321c1ca2887fb8eddaaa7e917399f71e63e03a1c83ff75ed12099a01115ea2ff", 1, 100
        ).send().getCells();
        Assert.assertTrue("Cells is null", cellOutputWithOutPoints.size() > 0);
    }

    @Test
    public void testGetLiveCell() throws IOException {
        Cell cell = ckbService.getLiveCell(
                new OutPoint("0x321c1ca2887fb8eddaaa7e917399f71e63e03a1c83ff75ed12099a01115ea2ff", 0)
        ).send().getCell();
        Assert.assertNotNull("Cell is null", cell);
    }

    @Test
    public void testSendTransaction() throws IOException {
        String transactionHash = ckbService.sendTransaction(
                new Transaction(0, Collections.emptyList(), Collections.emptyList(), Collections.emptyList())
        ).send().getTransactionHash();
        Assert.assertNotNull("Transaction hash is null", transactionHash);
    }


    @Test
    public void testGetTransactionTrace() throws IOException {
        List<TxTrace> txTraces = ckbService.getTransactionTrace(
                "0x1704f772f11c4c2fcb543f22cad66adad5a555e21f14c975c37d1d4bad096d47").send().getTxTrace();
        Assert.assertTrue("Transaction hash is null", txTraces.size() > 0);
    }

}
